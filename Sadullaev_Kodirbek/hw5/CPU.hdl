// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
      // "decode" which instruction to execute
      Or(a=instruction[15], b=false, out=isCInstruction); // if(instruction[15])  isCInstruction=true;
      Not(in=instruction[15],        out=isAInstruction); // if(!instruction[15]) isAInstruction=true;    
      
      And(a=isCInstruction, b=instruction[5], out=isCWriteA);               // isCInstruction && dest==A
      Or(a=isAInstruction, b=isCWriteA, out=loadA);                         // writeA if (A-instr || (isCInstruction && dest==A))
      Mux16(a=instruction, b=outALU, sel=isCWriteA, out=inAReg);
      ARegister(in=inAReg, load=loadA, out=outAreg, out[0..14]=addressM);   //outAreg==addressM 
  
      And(a=isCInstruction, b=instruction[4], out=loadD);                   // isCInstruction && dest==D
      DRegister(in=outALU, load=loadD, out=outDReg);
      
      Mux16(a=outAreg, b=inM, sel=instruction[12], out=outAorM);            // A or M, sel=a (a bit selects A register)
      
      ALU(
          x=outDReg,
          y=outAorM,
          zx=instruction[11],   // c1
          nx=instruction[10],   // c2
          zy=instruction[9],    // c3
          ny=instruction[8],    // c4
          f =instruction[7],    // c5
          no=instruction[6],    // c6
          out=outALU,
          out=outM,
          zr=isZeroOut,
          ng=isNegOut
        );
          
      // Set out flags and ProgramCounter
      Not(in=isNegOut, out=isNonNeg);
      Not(in=isZeroOut, out=isNonZero);
      And(a=isNonNeg, b=isNonZero, out=isPositive); // is positive? !zero && !negative
      
      And(a=isCInstruction, b=instruction[3], out=writeM);  // write M? isCInstruction && dest==M
      
      And(a=isPositive, b=instruction[0], out=JGT);
      And(a=isZeroOut, b=instruction[1], out=JEQ);
      And(a=isNegOut, b=instruction[2], out=JLT);
          
      Or(a=JEQ, b=JLT, out=JLE);
      Or(a=JLE, b=JGT, out=jumpToA);                  // is jump?
      And(a=isCInstruction, b=jumpToA, out=loadPC);   // loadPC? if(isCInstruction && jump)
      Not(in=loadPC, out=PCinc);
      PC(in=outAreg, inc=PCinc, load=loadPC, reset=reset, out[0..14]=pc);
}