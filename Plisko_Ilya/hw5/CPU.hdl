// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=outA); 
    Not(in=instruction[15], out=inv15);
    Or(a=inv15, b=instruction[5], out=writeA);
    ARegister(in=outA, load=writeA, out=A, out[0..14]=addressM);

    Mux16(a=A, b=inM, sel=instruction[12], out=AM);
    ALU(x=D, y=AM, zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=ALUout, zr=zr, ng=ng
    );

    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=ALUout, load=writeD, out=D);
    And(a=instruction[15], b=instruction[3], out=writeM, out=writeMM);
    Mux16(a=inM, b=ALUout, sel=writeMM, out=outM);


    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ng, out=i1);
    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zr, out=i2);
    Not(in=ng, out=nng);
    Not(in=zr, out=nzr);
    And(a=nzr, b=nng, out=pz);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=jgt, b=pz, out=i3);

    Or(a=i1, b=i2, out=i4);
    Or(a=i3, b=i4, out=dj); // dj - do jump

	PC(in=A, load=dj, inc=true, reset=reset, out[0..14]=pc);
}