// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP CPU {

    IN  inM[16],
        instruction[16],
        reset;

    OUT outM[16],
        writeM,
        addressM[15],
        pc[15];

    PARTS:

    Mux16(a=aOut, b=inM, sel=instruction[12], out=y);

    ALU(x=dOut, y=y,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        out=r, zr=z, ng=n);

    Or16(a=r, b=false, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);

    ARegister(in=aIn, load=loadA, out=aOut);
    Or16(a=aOut, b=false, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=r, load=loadD, out=dOut);

    Not(in=instruction[15], out=isA);
    Mux16(a=instruction, b=r, sel=instruction[15], out=aIn);
    Or(a=isA, b=instruction[5], out=loadA);

    And(a=z, b=instruction[1], out=j1);
    And(a=n, b=instruction[2], out=j2);

    Not(in=z, out=nz);
    Not(in=n, out=nn);
    And(a=nz, b=nn, out=pp);
    And(a=instruction[0], b=pp, out=j3);

    Or(a=j1, b=j2, out=jx);
    Or(a=jx, b=j3, out=jl);
    And(a=instruction[15], b=jl, out=loadPC);

    PC(in=aOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}

