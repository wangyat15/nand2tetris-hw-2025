// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isInstrA);
    Not(in=isInstrA, out=isInstrC);

    And(a=true, b=instruction[3], out=flagM);
    And(a=true, b=instruction[4], out=flagD);
    And(a=true, b=instruction[5], out=flagA);

    Mux16(a=aregOut, b=inM, sel=instruction[12], out=aluY);

    ALU(
        x=dregOut,
        y=aluY,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=zeroFlag,
        ng=negFlag
    );

    Not(in=zeroFlag, out=notZero);
    Not(in=negFlag, out=notNeg);

    And(a=isInstrC, b=flagA, out=useALUforA);
    Or(a=useALUforA, b=isInstrA, out=loadA);
    Mux16(a=instruction, b=aluOut, sel=useALUforA, out=aInput);
    ARegister(in=aInput, load=loadA, out[0..14]=addressM, out=aregOut);

    And(a=isInstrC, b=flagD, out=loadD);
    DRegister(in=aluOut, load=loadD, out=dregOut);

    And(a=isInstrC, b=flagM, out=writeM);

    And(a=notZero, b=notNeg, out=isPositive);
    And(a=isPositive, b=instruction[0], out=jmpGT);
    And(a=zeroFlag, b=instruction[1], out=jmpEQ);
    And(a=negFlag, b=instruction[2], out=jmpLT);

    Or(a=jmpGT, b=jmpEQ, out=tmp1);
    Or(a=tmp1, b=jmpLT, out=shouldJump);
    And(a=shouldJump, b=isInstrC, out=jumpNow);

    PC(in=aregOut, load=jumpNow, inc=true, reset=reset, out[0..14]=pc);
}
