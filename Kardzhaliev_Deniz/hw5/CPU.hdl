// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    // Instructions:

    // Checks if its a A-instruction
    Not(in= instruction[15], out= Ainstruction); // A instruction
    Not(in= Ainstruction, out= Cinstruction); // C instruction (Opposite)

    // Checks if its a B-instruction
    And(a= Cinstruction, b= instruction[5], out= ALUtoA); // C instruction
    Mux16(a= instruction, b= ALUout, sel= ALUtoA, out= AregIn); // Stores in A register

    Or(a= Ainstruction, b= ALUtoA, out= loadA);
    ARegister(in= AregIn, load= loadA, out= Aout);

    // Selects A or M
    Mux16(a= Aout, b= inM, sel= instruction[12], out= AMout);

    // Checks if ALU out is loaded to D register
    And(a= Cinstruction, b= instruction[4], out= loadD);
    DRegister(in= ALUout, load= loadD, out= Dout);

    // Calculates
    ALU(x= Dout, y= AMout, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= ALUout, zr= ZRout, ng= NGout);

    // CPU write data memory
    Or16(a= false, b= Aout, out[0..14] = addressM);
    Or16(a= false, b= ALUout, out= outM);
    And(a= Cinstruction, b= instruction[3], out= writeM);

    // Jump conditions
    And(a= ZRout, b= instruction[1], out= jeq); // zero
    And(a= NGout, b= instruction[2], out= jit); // negative
    Or(a= ZRout, b= NGout, out= zeroOrNeg); // zero or negative
    Not(in= zeroOrNeg, out= positive);

    And(a= positive, b= instruction[0], out= jgt);
    Or(a= jeq, b= jit, out= jle);
    Or(a= jle, b= jgt, out= jumpToA);
    And(a= Cinstruction, b= jumpToA, out= PCload);
    Not(in= PCload, out= PCinc);
    PC(in= Aout, load= PCload, inc= PCinc, reset= reset, out[0..14]= pc );

}