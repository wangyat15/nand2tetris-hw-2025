// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//Aregister
    Not(in=instruction[15] , out=cin );
    Mux16(a=instruction  , b=outb, sel=instruction[15] , out=Ain );
    Or(a=cin , b=instruction[5] , out=loadA);
    ARegister(in=Ain , load=loadA , out=A, out[0..14]=addressM );
   
    //dregister
    And(a=instruction[15] , b=instruction[4] , out=d4 );
    DRegister(in=outb , load=d4 , out=x);
    And(a=instruction[15] , b=instruction[3] , out=writeM );
    And(a= instruction[15], b=instruction[12] , out=selam );
    Mux16(a=A , b=inM , sel=selam , out=y );
    
    ALU(x=x , y=y, zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outM, out=outb , zr=zrout , ng=ngout );
    
    //jump conditions
    Not(in=zrout , out=Nzr );
    Not(in=ngout , out=Nng );
    And(a=Nng , b=Nzr , out=jgt);
    And(a=ngout , b=Nzr , out=jlt);
    And(a=Nng , b=zrout , out=jeq);
    Or(a=jgt , b=jeq , out=jge );
    Or(a=jlt , b=jeq , out=jle );
    Or(a=jgt , b=jlt , out=jne );
    And(a=false , b=false , out=nul );
    And(a=true , b=true , out=jmp );

    //mux8way
    Mux(a=nul , b=jgt , sel=instruction[0] , out=nevorpo );
    Mux(a= jlt, b=jne , sel=instruction[0] , out=neorneq );
    Mux(a=jeq , b=jge , sel=instruction[0] , out=eqorgr );
    Mux(a=jle , b=jmp , sel=instruction[0] , out=leoral );

    Mux(a= nevorpo, b=eqorgr , sel=instruction[1] , out=opt2 );
    Mux(a=neorneq , b=leoral , sel=instruction[1] , out=opt3 );

    Mux(a=opt2 , b=opt3 , sel=instruction[2] , out=loadpc );
    Not(in=loadpcf , out=nloadpcf );
    And(a =instruction[15] , b =loadpc , out =loadpcf );
    PC(in=A , load=loadpcf , inc=nloadpcf , reset=reset , out[0..14]=pc );
}