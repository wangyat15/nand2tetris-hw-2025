// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	// first since there is not a 3 way dmux which would also be incorrect
     //this splits into 4 parts which are 8k where the last one
     // only usees 1 bit for the keyboard
     // we need to use the top 2 bits in order to seperate them
    DMux4Way(in=load, sel=address[13..14], 
             a=ramA, b=ramB, c=screenIn, d=null);

    // Combined ramA and ramB load signals since RAM16K handles both
    Or(a=ramA, b=ramB, out=ramIn);


    RAM16K(in=in, load=ramIn, address=address[0..13], out=ramOut);

    // This is double ram 4k which was 12 so this needs 13
    Screen(in=in, load=screenIn, address=address[0..12], out=screenOut);


    Keyboard(out=kbdOut);


    Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=kbdOut, 
              sel=address[13..14], out=out);
}