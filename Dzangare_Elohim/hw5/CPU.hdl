// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=InputForA);
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA);
    ARegister(in=InputForA, load=loadA, out=RegisterA, out[0..14]=addressM);
    

    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadD);
    DRegister(in=ALUOutput, load=loadD, out=RegisterD);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
    
    Mux16(a=RegisterA, b=inM, sel=instruction[12], out=SelectAorM);
    ALU(x=RegisterD, y=SelectAorM, 
    zx=instruction[11], nx=instruction[10], zy=instruction[9], 
    ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=ALUOutput, out=outM, zr=Zero, ng=Negative);

    Or(a=Zero, b=Negative, out=NotPositive);
    Not(in=NotPositive, out=Positive);

    And(a=instruction[0], b=Positive, out=JCode1);
    And(a=instruction[1], b=Zero, out=JCode2);
    And(a=instruction[2], b=Negative, out=JCode3);

    Or8Way(in[0]=JCode1, in[1]=JCode2, in[2]=JCode3, in[3..7]=false, out=JMPCode);

    Mux(a=false, b=JMPCode, sel=instruction[15], out=loadPC);

    PC(in=RegisterA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    
}