// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    Mux16(a= false, b= instruction, sel= instruction[15], 
    out[0]= JGT, out[1]= JEQ, out[2]= JLT, out[3]=writeM, 
    out[4]=DestD, out[5]= DestA, out[6]= AluNo, out[7]= AluF, 
    out[8]= AluNy, out[9]= AluZy, out[10]= AluNx, out[11]= AluZx, 
    out[12]= AOr, out[15]=cT);

    Mux16(a= instruction, b= aluOut, sel= cT, out= Ain);
    Mux16(a= Rg2Out, b= inM, sel= AOr, out= y);

    DRegister(in= aluOut, load= DestD, out= Rg1Out);
    ARegister(in= Ain, load= loadA, out= Rg2Out, out[0..14]= addressM);

    Not(in= cT, out= ncT);
    Or(a= ncT, b= DestA, out= loadA);
    
    ALU(x= Rg1Out, y= y, zx=AluZx, nx= AluNx, zy= AluZy, ny= AluNy, 
    f= AluF, no= AluNo, out= aluOut, out=outM, zr= zr, ng= ng);
    
    PC(in= Rg2Out, load= jump, inc= true, reset= reset, out[0..14]= pc);

    //Jump Part
    And(a= JLT, b= ng, out= LessOut);
    And(a= JEQ, b= zr, out= EqualOut);
    And(a= JGT, b= ps, out= GreaterOut);

    Or(a= zr, b= ng, out= orOut);
    Not(in= orOut, out= ps);

    Or(a= LessOut, b= EqualOut, out= Out1);
    Or(a= Out1, b= GreaterOut, out= jump);


}