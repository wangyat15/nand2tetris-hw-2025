// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);

    Mux16(a=instruction, b=aluOutput, sel=isCInstruction, out=aRegisterInput);
    And(a=instruction[5], b=isCInstruction, out=storeALUResultInARegister);
    Or(a=storeALUResultInARegister, b=isAInstruction, out=aRegisterLoad);
    ARegister(in=aRegisterInput, load=aRegisterLoad, out=aRegisterOutput, out[0..14]=addressM);

    Mux16(a=aRegisterOutput, b=inM, sel=instruction[12], out=aluYInput);

    And(a=instruction[4], b=isCInstruction, out=dRegisterLoad);
    DRegister(in=aluOutput, load=dRegisterLoad, out=dRegisterOutput);

    ALU(x=dRegisterOutput, y=aluYInput,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        out=aluOutput, out=outM, zr=aluZero, ng=aluNegative);

    And(a=instruction[3], b=isCInstruction, out=writeM);

    Not(in=aluZero, out=isNonZero);
    Not(in=aluNegative, out=isNonNegative);
    And(a=isNonZero, b=isNonNegative, out=isPositive);

    And(a=instruction[2], b=aluNegative, out=jumpIfNegative);
    And(a=instruction[1], b=aluZero, out=jumpIfZero);
    And(a=instruction[0], b=isPositive, out=jumpIfPositive);

    Or(a=jumpIfNegative, b=jumpIfZero, out=jumpIfNegOrZero);
    Or(a=jumpIfNegOrZero, b=jumpIfPositive, out=shouldJump);
    And(a=shouldJump, b=isCInstruction, out=loadPC);

    PC(in=aRegisterOutput, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}