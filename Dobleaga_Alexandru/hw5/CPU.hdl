// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=u, b=inM, sel=instruction[12], out=e);
    ALU(x=w, y=e,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        out=r, zr=z, ng=n);
    
    ARegister(in=InputU, load=LoadU, out=u);
    Mux16(a=instruction, b=r, sel=instruction[15], out=InputU);
    Or(a=U, b=instruction[5], out=LoadU);
    Not(in=instruction[15], out=U);

    And(a=instruction[4], b=instruction[15], out=loadW);
    DRegister(in=r, load=loadW, out=w);

    Or(a=z, b=n, out=s);
    Not(in=s, out=m);

    And(a=z, b=instruction[1], out=aux1);
    And(a=n, b=instruction[2], out=aux2);
    And(a=m, b=instruction[0], out=aux3);
    Or(a=aux1, b=aux2, out=aux4);
    Or(a=aux4, b=aux3, out=aux5);
    And(a=instruction[15], b=aux5, out=LoadPC);

    Or16(a=r, b=false, out=outM); //Compute outM
    And(a=instruction[3], b=instruction[15], out=writeM); //Compute writeM
    Or16(a=u, b=false, out[0..14]=addressM); //Compute addressM
    PC(in=u, load=LoadPC, inc=true, reset=reset, out[0..14]=pc); //Compute pc
}