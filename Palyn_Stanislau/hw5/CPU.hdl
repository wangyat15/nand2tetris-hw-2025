// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16(a=outA, b=inM, sel=instruction[12], out=AM);


    ALU(x=outD, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=outALU, zr=zr, ng=ng);

    // Updating RAM[A]
    Or16(a=outALU, b=false, out=outM);
    And(a=instruction[3], b=instruction[15], out=writeM);
    Or16(a=outA, b=false, out[0..14]=addressM);

    // Updating D
    And(a=instruction[4], b=instruction[15], out=writeD);
    DRegister(in=outALU, load=writeD, out=outD);

    // Updating A
    Not(in=instruction[15], out=notInstruction15);
    Mux16(a=instruction[0..15], b=outALU, sel=instruction[15], out=newA);
    Or(a=notInstruction15, b=instruction[5], out=writeA);
    ARegister(in=newA, load=writeA, out=outA);

    // Jump logic
    Not(in=zr, out=notZero);
    Not(in=ng, out=notNeg);
    And(a=notZero, b=notNeg, out=positive);
    Not(in=instruction[0], out=notInstruction0);
    Not(in=instruction[1], out=notInstruction1);
    Not(in=instruction[2], out=notInstruction2);

    And(a=notInstruction0, b=positive, out=notJump1);
    And(a=notInstruction1, b=zr, out=notJump2);
    And(a=notInstruction2, b=ng, out=notJump3);
    Or(a=notJump1, b=notJump2, out=tmp1);
    Or(a=tmp1, b=notJump3, out=tmp2);
    Or(a=tmp2, b=notInstruction15, out=notJump);
    Not(in=notJump, out=jump);

    PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);
}